datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String? // Optional password field for credential auth
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  post          Post[]
  Authenticator Authenticator[]
  Application   Application[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id             String        @id @default(uuid())
  title          String
  company        String
  logo           String
  category       String
  date           DateTime
  location       String
  pay            String?
  presence       String? // e.g., Remote, Hybrid, On-site
  jobType        String? // e.g., Full-time, Part-time, Internship
  jobDescription String?
  startDate      DateTime?
  endDate        DateTime?
  summary        String?
  duties         String
  qualifications String
  applyBy        DateTime?
  author         String
  userId         String
  createdAt      DateTime      @default(now())
  user           User          @relation(fields: [userId], references: [id])
  Application    Application[]
}

model Profile {
  id             String   @id @default(cuid())
  userId         String   @unique
  name           String
  bio            String
  date           DateTime @default(now())
  author         String
  resume         String?
  headline       String
  email          String
  phone          String?
  linkedin       String?
  website        String?
  searchingFor   String?
  timeCommitment String?
  presence       String?
  location       String?
  typeOfPerson   String?
  user           User     @relation(fields: [userId], references: [id])
}

model Application {
  id       String   @id @default(uuid())
  postId   String
  userId   String
  name     String
  email    String
  phone    String? // optional
  linkedin String? // optional
  website  String? // optional
  resume   String? // optional
  bio      String? // optional
  date     DateTime
  message  String? // optional

  // Relations (optional, depending on your schema)
  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
